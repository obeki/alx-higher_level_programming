===================
Simple doctest file
===================

Numbers
=======
``0-add_integer.py module``

::
 >>> add_integer = __import__('0-add_integer').add_integer
 >>> add_integer(2)
 100

The function allows for the second argument to be optional

::
 >>> add_integer(1.0, -3.0)
 -2

The function works for negative values and floating point values
The result is always an integer value because the values are casted before the addition

::
 >>> add_integer(5, 10)
 15

Simple use case for passing two integers


Non-Numbers
===========
The function considers other datatypes othere than numbers and returns the right error message
for each case

::
 >>> add_integer('jane', 50)
 Traceback (most recent call last):
 TypeError: a must be an integer


::
 >>> add_integer(2, '50')
 Traceback (most recent call last):
 TypeError: b must be an integer

The function responds with an error message TypeError, when the argument passed is not a
float or an integer

:: 
 >>> add_integer(float('inf'))
 Traceback (most recent call last):
 OverflowError: cannot convert float infinity to integer

Note that when converting infinity to integer, an OverflowError is caused

::
 
 >>> add_integer(2, float('nan'))
 Traceback (most recent call last):
 ValueError: cannot convert float NaN to integer

