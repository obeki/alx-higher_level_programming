
===========================
How to Use 0-add_integer.py
===========================

This module defines a function that adds two integers ``add_integer(a, b=98)``.

Numbers
=======

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 5)
    7

::

    >>> add_integer(0, -3)
    -3

::

   >>> add_integer(-1, -2)
   -3
It also works with floating-point values.

::

    >>> add_integer(2.0, 4.0)
    6

There is a cast operation that converts floats to int before the addition.

::

    >>> add_integer(0.0, -0.2)
    0

::

    >>> add_integer(-1.5, -0.5)
    -2

Integers and floating point args can be passed together.

::

    >>> add_integer(0.1, 3)
    3

The second argument is optional - it has a default balue of 98 if ommited.

::

    >>> add_integer(-98)
    0

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
